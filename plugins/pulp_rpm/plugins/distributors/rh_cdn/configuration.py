# -*- coding: utf-8 -*-
#
# Copyright Â© 2013 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the License
# (GPLv2) or (at your option) any later version.
# There is NO WARRANTY for this software, express or implied, including the
# implied warranties of MERCHANTABILITY, NON-INFRINGEMENT, or FITNESS FOR A
# PARTICULAR PURPOSE.
# You should have received a copy of GPLv2 along with this software;
# if not, see http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt

import os

from pulp_rpm.plugins.distributors.yum import configuration as yum_publish_config


# These information are used to locate the repo diretory previously generated by
# YumHTTPDistributor. For the same repo, their values should be the same as set
# for YumHTTPDistributor.
REQUIRED_CONFIG_KEYS = ('relative_url', 'http', 'https', 'handler_type')

OPTIONAL_CONFIG_KEYS = (
    'cdn_host', # host name for the cdn
    'cdn_root', # under which directory to copy repo data
    'user', # when rsync using ssh protocol, it requires a username
)

'''
A sample rh_cdn_distributor.conf can look like this:

{
    'relative_url': 'some-repo',
    'http': false,
    'https': true,
    'handler_type': 'rsync',

    'cdn': {
        'user': 'username',
        'host': 'hostname.domain',
        'dir': '/var/lib/cdn/'
    }
}
'''


def validate_config(repo, config, config_conduit):
    """
    Validate the prospective configuration instance for the the give repository.

    :param repo: repository to validate the config for
    :type  repo: pulp.plugins.model.Repository
    :param config: configuration instance to validate
    :type  config: pulp.plugins.config.PluginCallConfiguration
    :param config_conduit: conduit providing access to relevant Pulp functionality
    :type  config_conduit: pulp.plugins.conduits.repo_config.RepoConfigConduit
    :return: tuple of (bool, str) stating that the configuration is valid or not and why
    :rtype:  tuple of (bool, str or None)
    """
    config = config.flatten() # now config is {}
    errors = []

    # TODO (ctang) make sure the config has everything mandatory

    # TODO (ctang) make sure their values are proper


    return (True, None)

def get_repo_dir(repo, config):
    """
    Get the dir of repodata directory generated by YumHTTPDistributor.

    :param repo: repository to get dir for
    :type  repo: pulp.plugins.model.Repository
    :param config: configuration instance to validate
    :type  config: pulp.plugins.config.PluginCallConfiguration
    :return: str the directory of repo
    :rtype:  str or None
    """
    d_config = config.flatten()

    repo_base_dir = None
    if d_config.get('http') == True:
        repo_base_dir = yum_publish_config.get_http_publish_dir(config)
    else:
        repo_base_dir = yum_publish_config.get_https_publish_dir(config)
    repo_rel_dir = yum_publish_config.get_repo_relative_path(repo, config)

    return os.path.join(repo_base_dir, repo_rel_dir)
